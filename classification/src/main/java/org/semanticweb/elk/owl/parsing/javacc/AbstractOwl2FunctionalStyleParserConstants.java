/* Generated By:JavaCC: Do not edit this line. AbstractOwl2FunctionalStyleParserConstants.java */
package org.semanticweb.elk.owl.parsing.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AbstractOwl2FunctionalStyleParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 5;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 6;
  /** RegularExpression Id. */
  int EQUALS = 7;
  /** RegularExpression Id. */
  int REFERENCE = 8;
  /** RegularExpression Id. */
  int PREFIX = 9;
  /** RegularExpression Id. */
  int ONTOLOGY = 10;
  /** RegularExpression Id. */
  int IMPORT = 11;
  /** RegularExpression Id. */
  int CLASS = 12;
  /** RegularExpression Id. */
  int DATATYPE = 13;
  /** RegularExpression Id. */
  int OBJECT_PROPERTY = 14;
  /** RegularExpression Id. */
  int DATA_PROPERTY = 15;
  /** RegularExpression Id. */
  int ANNOTATION_PROPERTY = 16;
  /** RegularExpression Id. */
  int NAMED_INDIVIDUAL = 17;
  /** RegularExpression Id. */
  int DECLARATION = 18;
  /** RegularExpression Id. */
  int OBJECT_INVERSE_OF = 19;
  /** RegularExpression Id. */
  int OBJECT_PROPERTY_CHAIN = 20;
  /** RegularExpression Id. */
  int COMPLEMENT_OF = 21;
  /** RegularExpression Id. */
  int ONE_OF = 22;
  /** RegularExpression Id. */
  int DATATYPE_RESTRICTION = 23;
  /** RegularExpression Id. */
  int OBJECT_INTERSECTION_OF = 24;
  /** RegularExpression Id. */
  int OBJECT_UNION_OF = 25;
  /** RegularExpression Id. */
  int OBJECT_COMPLEMENT_OF = 26;
  /** RegularExpression Id. */
  int OBJECT_ONE_OF = 27;
  /** RegularExpression Id. */
  int OBJECT_SOME_VALUES_FROM = 28;
  /** RegularExpression Id. */
  int OBJECT_ALL_VALUES_FROM = 29;
  /** RegularExpression Id. */
  int OBJECT_HAS_VALUE = 30;
  /** RegularExpression Id. */
  int OBJECT_HAS_SELF = 31;
  /** RegularExpression Id. */
  int OBJECT_MIN_CARDINALITY = 32;
  /** RegularExpression Id. */
  int OBJECT_MAX_CARDINALITY = 33;
  /** RegularExpression Id. */
  int OBJECT_EXACT_CARDINALITY = 34;
  /** RegularExpression Id. */
  int DATA_INTERSECTION_OF = 35;
  /** RegularExpression Id. */
  int DATA_UNION_OF = 36;
  /** RegularExpression Id. */
  int DATA_COMPLEMENT_OF = 37;
  /** RegularExpression Id. */
  int DATA_ONE_OF = 38;
  /** RegularExpression Id. */
  int DATA_SOME_VALUES_FROM = 39;
  /** RegularExpression Id. */
  int DATA_ALL_VALUES_FROM = 40;
  /** RegularExpression Id. */
  int DATA_HAS_VALUE = 41;
  /** RegularExpression Id. */
  int DATA_MIN_CARDINALITY = 42;
  /** RegularExpression Id. */
  int DATA_MAX_CARDINALITY = 43;
  /** RegularExpression Id. */
  int DATA_EXACT_CARDINALITY = 44;
  /** RegularExpression Id. */
  int SUB_CLASS_OF = 45;
  /** RegularExpression Id. */
  int EQUIVALENT_CLASSES = 46;
  /** RegularExpression Id. */
  int DISJOINT_CLASSES = 47;
  /** RegularExpression Id. */
  int DISJOINT_UNION = 48;
  /** RegularExpression Id. */
  int SUB_OBJECT_PROPERTY_OF = 49;
  /** RegularExpression Id. */
  int EQUIVALENT_OBJECT_PROPERTIES = 50;
  /** RegularExpression Id. */
  int DISJOINT_OBJECT_PROPERTIES = 51;
  /** RegularExpression Id. */
  int OBJECT_PROPERTY_DOMAIN = 52;
  /** RegularExpression Id. */
  int OBJECT_PROPERTY_RANGE = 53;
  /** RegularExpression Id. */
  int INVERSE_OBJECT_PROPERTIES = 54;
  /** RegularExpression Id. */
  int FUNCTIONAL_OBJECT_PROPERTY = 55;
  /** RegularExpression Id. */
  int INVERSE_FUNCTIONAL_OBJECT_PROPERTY = 56;
  /** RegularExpression Id. */
  int REFLEXIVE_OBJECT_PROPERTY = 57;
  /** RegularExpression Id. */
  int IRREFLEXIVE_OBJECT_PROPERTY = 58;
  /** RegularExpression Id. */
  int SYMMETRIC_OBJECT_PROPERTY = 59;
  /** RegularExpression Id. */
  int ASYMMETRIC_OBJECT_PROPERTY = 60;
  /** RegularExpression Id. */
  int TRANSITIVE_OBJECT_PROPERTY = 61;
  /** RegularExpression Id. */
  int SUB_DATA_PROPERTY_OF = 62;
  /** RegularExpression Id. */
  int EQUIVALENT_DATA_PROPERTIES = 63;
  /** RegularExpression Id. */
  int DISJOINT_DATA_PROPERTIES = 64;
  /** RegularExpression Id. */
  int DATA_PROPERTY_DOMAIN = 65;
  /** RegularExpression Id. */
  int DATA_PROPERTY_RANGE = 66;
  /** RegularExpression Id. */
  int FUNCTIONAL_DATA_PROPERTY = 67;
  /** RegularExpression Id. */
  int DATATYPE_DEFINITION = 68;
  /** RegularExpression Id. */
  int HAS_KEY = 69;
  /** RegularExpression Id. */
  int SWRL_RULE = 70;
  /** RegularExpression Id. */
  int SWRL_BODY = 71;
  /** RegularExpression Id. */
  int SWRL_HEAD = 72;
  /** RegularExpression Id. */
  int SWRL_CLASS_ATOM = 73;
  /** RegularExpression Id. */
  int SWRL_DATA_RANGE_ATOM = 74;
  /** RegularExpression Id. */
  int SWRL_OBJECT_PROPERTY_ATOM = 75;
  /** RegularExpression Id. */
  int SWRL_DATA_PROPERTY_ATOM = 76;
  /** RegularExpression Id. */
  int SWRL_BUILTIN_ATOM = 77;
  /** RegularExpression Id. */
  int SWRL_SAME_INDIVIDUALS_ATOM = 78;
  /** RegularExpression Id. */
  int SWRL_DIFFERENT_INDIVIDUALS_ATOM = 79;
  /** RegularExpression Id. */
  int SWRL_VARIABLE = 80;
  /** RegularExpression Id. */
  int SAME_INDIVIDUAL = 81;
  /** RegularExpression Id. */
  int DIFFERENT_INDIVIDUALS = 82;
  /** RegularExpression Id. */
  int CLASS_ASSERTION = 83;
  /** RegularExpression Id. */
  int OBJECT_PROPERTY_ASSERTION = 84;
  /** RegularExpression Id. */
  int NEGATIVE_OBJECT_PROPERTY_ASSERTION = 85;
  /** RegularExpression Id. */
  int DATA_PROPERTY_ASSERTION = 86;
  /** RegularExpression Id. */
  int NEGATIVE_DATA_PROPERTY_ASSERTION = 87;
  /** RegularExpression Id. */
  int ANNOTATION = 88;
  /** RegularExpression Id. */
  int ANNOTATION_ASSERTION = 89;
  /** RegularExpression Id. */
  int SUB_ANNOTATION_PROPERTY_OF = 90;
  /** RegularExpression Id. */
  int ANNOTATION_PROPERTY_DOMAIN = 91;
  /** RegularExpression Id. */
  int ANNOTATION_PROPERTY_RANGE = 92;
  /** RegularExpression Id. */
  int NON_NEGATIVE_INTEGER = 93;
  /** RegularExpression Id. */
  int LANGTAG = 94;
  /** RegularExpression Id. */
  int PNAME_NS = 95;
  /** RegularExpression Id. */
  int PN_PREFIX = 96;
  /** RegularExpression Id. */
  int BLANK_NODE_PREFIX = 97;
  /** RegularExpression Id. */
  int DIGIT = 98;
  /** RegularExpression Id. */
  int PN_CHARS_U = 99;
  /** RegularExpression Id. */
  int PN_CHARS = 100;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 101;
  /** RegularExpression Id. */
  int FULL_IRI = 105;
  /** RegularExpression Id. */
  int PN_LOCAL = 107;
  /** RegularExpression Id. */
  int QUOTED_STRING = 109;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int FullIri = 1;
  /** Lexical state. */
  int FullIriEnd = 2;
  /** Lexical state. */
  int AfterPrefix = 3;
  /** Lexical state. */
  int QuotedString = 4;
  /** Lexical state. */
  int QuotedStringEnd = 5;
  /** Lexical state. */
  int Comment = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"^^\"",
    "\"Prefix\"",
    "\"Ontology\"",
    "\"Import\"",
    "\"Class\"",
    "\"Datatype\"",
    "\"ObjectProperty\"",
    "\"DataProperty\"",
    "\"AnnotationProperty\"",
    "\"NamedIndividual\"",
    "\"Declaration\"",
    "\"ObjectInverseOf\"",
    "\"ObjectPropertyChain\"",
    "\"ComplementOf\"",
    "\"OneOf\"",
    "\"DatatypeRestriction\"",
    "\"ObjectIntersectionOf\"",
    "\"ObjectUnionOf\"",
    "\"ObjectComplementOf\"",
    "\"ObjectOneOf\"",
    "\"ObjectSomeValuesFrom\"",
    "\"ObjectAllValuesFrom\"",
    "\"ObjectHasValue\"",
    "\"ObjectHasSelf\"",
    "\"ObjectMinCardinality\"",
    "\"ObjectMaxCardinality\"",
    "\"ObjectExactCardinality\"",
    "\"DataIntersectionOf\"",
    "\"DataUnionOf\"",
    "\"DataComplementOf\"",
    "\"DataOneOf\"",
    "\"DataSomeValuesFrom\"",
    "\"DataAllValuesFrom\"",
    "\"DataHasValue\"",
    "\"DataMinCardinality\"",
    "\"DataMaxCardinality\"",
    "\"DataExactCardinality\"",
    "\"SubClassOf\"",
    "\"EquivalentClasses\"",
    "\"DisjointClasses\"",
    "\"DisjointUnion\"",
    "\"SubObjectPropertyOf\"",
    "\"EquivalentObjectProperties\"",
    "\"DisjointObjectProperties\"",
    "\"ObjectPropertyDomain\"",
    "\"ObjectPropertyRange\"",
    "\"InverseObjectProperties\"",
    "\"FunctionalObjectProperty\"",
    "\"InverseFunctionalObjectProperty\"",
    "\"ReflexiveObjectProperty\"",
    "\"IrreflexiveObjectProperty\"",
    "\"SymmetricObjectProperty\"",
    "\"AsymmetricObjectProperty\"",
    "\"TransitiveObjectProperty\"",
    "\"SubDataPropertyOf\"",
    "\"EquivalentDataProperties\"",
    "\"DisjointDataProperties\"",
    "\"DataPropertyDomain\"",
    "\"DataPropertyRange\"",
    "\"FunctionalDataProperty\"",
    "\"DatatypeDefinition\"",
    "\"HasKey\"",
    "\"DLSafeRule\"",
    "\"Body\"",
    "\"Head\"",
    "\"ClassAtom\"",
    "\"DataRangeAtom\"",
    "\"ObjectPropertyAtom\"",
    "\"DataPropertyAtom\"",
    "\"BuiltInAtom\"",
    "\"SameIndividualsAtom\"",
    "\"DifferentIndividualsAtom\"",
    "\"Variable\"",
    "\"SameIndividual\"",
    "\"DifferentIndividuals\"",
    "\"ClassAssertion\"",
    "\"ObjectPropertyAssertion\"",
    "\"NegativeObjectPropertyAssertion\"",
    "\"DataPropertyAssertion\"",
    "\"NegativeDataPropertyAssertion\"",
    "\"Annotation\"",
    "\"AnnotationAssertion\"",
    "\"SubAnnotationPropertyOf\"",
    "\"AnnotationPropertyDomain\"",
    "\"AnnotationPropertyRange\"",
    "<NON_NEGATIVE_INTEGER>",
    "<LANGTAG>",
    "<PNAME_NS>",
    "<PN_PREFIX>",
    "\"_:\"",
    "<DIGIT>",
    "<PN_CHARS_U>",
    "<PN_CHARS>",
    "<PN_CHARS_BASE>",
    "\"<\"",
    "\"\\\"\"",
    "\"#\"",
    "<FULL_IRI>",
    "\">\"",
    "<PN_LOCAL>",
    "\"\"",
    "<QUOTED_STRING>",
    "\"\\\"\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 113>",
  };

}
