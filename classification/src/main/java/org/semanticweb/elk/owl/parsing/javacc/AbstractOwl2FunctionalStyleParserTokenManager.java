/* AbstractOwl2FunctionalStyleParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AbstractOwl2FunctionalStyleParserTokenManager.java */
package org.semanticweb.elk.owl.parsing.javacc;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.semanticweb.elk.owl.interfaces.ElkAnnotation;
import org.semanticweb.elk.owl.interfaces.ElkAnnotationAssertionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkAnnotationAxiom;
import org.semanticweb.elk.owl.interfaces.ElkAnnotationProperty;
import org.semanticweb.elk.owl.interfaces.ElkAnnotationPropertyDomainAxiom;
import org.semanticweb.elk.owl.interfaces.ElkAnnotationPropertyRangeAxiom;
import org.semanticweb.elk.owl.interfaces.ElkAnnotationSubject;
import org.semanticweb.elk.owl.interfaces.ElkAnnotationValue;
import org.semanticweb.elk.owl.interfaces.ElkAnonymousIndividual;
import org.semanticweb.elk.owl.interfaces.ElkAssertionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkAsymmetricObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkAxiom;
import org.semanticweb.elk.owl.interfaces.ElkClass;
import org.semanticweb.elk.owl.interfaces.ElkClassAssertionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkClassAxiom;
import org.semanticweb.elk.owl.interfaces.ElkClassExpression;
import org.semanticweb.elk.owl.interfaces.ElkDataAllValuesFrom;
import org.semanticweb.elk.owl.interfaces.ElkDataComplementOf;
import org.semanticweb.elk.owl.interfaces.ElkDataExactCardinality;
import org.semanticweb.elk.owl.interfaces.ElkDataHasValue;
import org.semanticweb.elk.owl.interfaces.ElkDataIntersectionOf;
import org.semanticweb.elk.owl.interfaces.ElkDataMaxCardinality;
import org.semanticweb.elk.owl.interfaces.ElkDataMinCardinality;
import org.semanticweb.elk.owl.interfaces.ElkDataOneOf;
import org.semanticweb.elk.owl.interfaces.ElkDataProperty;
import org.semanticweb.elk.owl.interfaces.ElkDataPropertyAssertionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDataPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDataPropertyDomainAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDataPropertyExpression;
import org.semanticweb.elk.owl.interfaces.ElkDataPropertyRangeAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDataRange;
import org.semanticweb.elk.owl.interfaces.ElkDataSomeValuesFrom;
import org.semanticweb.elk.owl.interfaces.ElkDataUnionOf;
import org.semanticweb.elk.owl.interfaces.ElkDatatype;
import org.semanticweb.elk.owl.interfaces.ElkDatatypeDefinitionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDatatypeRestriction;
import org.semanticweb.elk.owl.interfaces.ElkDeclarationAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDifferentIndividualsAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDisjointClassesAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDisjointDataPropertiesAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDisjointObjectPropertiesAxiom;
import org.semanticweb.elk.owl.interfaces.ElkDisjointUnionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkEntity;
import org.semanticweb.elk.owl.interfaces.ElkEquivalentClassesAxiom;
import org.semanticweb.elk.owl.interfaces.ElkEquivalentDataPropertiesAxiom;
import org.semanticweb.elk.owl.interfaces.ElkEquivalentObjectPropertiesAxiom;
import org.semanticweb.elk.owl.interfaces.ElkFacetRestriction;
import org.semanticweb.elk.owl.interfaces.ElkFunctionalDataPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkFunctionalObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkHasKeyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkIndividual;
import org.semanticweb.elk.owl.interfaces.ElkInverseFunctionalObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkInverseObjectPropertiesAxiom;
import org.semanticweb.elk.owl.interfaces.ElkIrreflexiveObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkLiteral;
import org.semanticweb.elk.owl.interfaces.ElkNamedIndividual;
import org.semanticweb.elk.owl.interfaces.ElkNegativeDataPropertyAssertionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkNegativeObjectPropertyAssertionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkObject;
import org.semanticweb.elk.owl.interfaces.ElkObjectAllValuesFrom;
import org.semanticweb.elk.owl.interfaces.ElkObjectComplementOf;
import org.semanticweb.elk.owl.interfaces.ElkObjectExactCardinality;
import org.semanticweb.elk.owl.interfaces.ElkObject.Factory;
import org.semanticweb.elk.owl.interfaces.ElkObjectHasSelf;
import org.semanticweb.elk.owl.interfaces.ElkObjectHasValue;
import org.semanticweb.elk.owl.interfaces.ElkObjectIntersectionOf;
import org.semanticweb.elk.owl.interfaces.ElkObjectInverseOf;
import org.semanticweb.elk.owl.interfaces.ElkObjectMaxCardinality;
import org.semanticweb.elk.owl.interfaces.ElkObjectMinCardinality;
import org.semanticweb.elk.owl.interfaces.ElkObjectOneOf;
import org.semanticweb.elk.owl.interfaces.ElkObjectProperty;
import org.semanticweb.elk.owl.interfaces.ElkObjectPropertyAssertionAxiom;
import org.semanticweb.elk.owl.interfaces.ElkObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkObjectPropertyChain;
import org.semanticweb.elk.owl.interfaces.ElkObjectPropertyDomainAxiom;
import org.semanticweb.elk.owl.interfaces.ElkObjectPropertyExpression;
import org.semanticweb.elk.owl.interfaces.ElkObjectPropertyRangeAxiom;
import org.semanticweb.elk.owl.interfaces.ElkObjectSomeValuesFrom;
import org.semanticweb.elk.owl.interfaces.ElkObjectUnionOf;
import org.semanticweb.elk.owl.interfaces.ElkReflexiveObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkSameIndividualAxiom;
import org.semanticweb.elk.owl.interfaces.ElkSubAnnotationPropertyOfAxiom;
import org.semanticweb.elk.owl.interfaces.ElkSubClassOfAxiom;
import org.semanticweb.elk.owl.interfaces.ElkSubDataPropertyOfAxiom;
import org.semanticweb.elk.owl.interfaces.ElkSubObjectPropertyExpression;
import org.semanticweb.elk.owl.interfaces.ElkSubObjectPropertyOfAxiom;
import org.semanticweb.elk.owl.interfaces.ElkSymmetricObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkTransitiveObjectPropertyAxiom;
import org.semanticweb.elk.owl.interfaces.ElkSWRLRule;
import org.semanticweb.elk.owl.iris.ElkAbbreviatedIri;
import org.semanticweb.elk.owl.iris.ElkFullIri;
import org.semanticweb.elk.owl.iris.ElkIri;
import org.semanticweb.elk.owl.iris.ElkPrefix;
import org.semanticweb.elk.owl.iris.ElkPrefixDeclarations;
import org.semanticweb.elk.owl.iris.ElkPrefixImpl;
import org.semanticweb.elk.owl.parsing.Owl2ParseException;
import org.semanticweb.elk.owl.parsing.Owl2Parser;
import org.semanticweb.elk.owl.parsing.Owl2ParserAxiomProcessor;

/** Token Manager. */
@SuppressWarnings ("unused")
public class AbstractOwl2FunctionalStyleParserTokenManager implements AbstractOwl2FunctionalStyleParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x1fffffffL) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x1fffffffL) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x1fffffffL) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x1fffffffL) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x1ffffe7fL) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0xffffffffffbfee00L) != 0L || (active1 & 0x1ffffe7fL) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0xffffffffffbfe400L) != 0L || (active1 & 0x1ffffe5fL) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0xffffffffffbfe400L) != 0L || (active1 & 0x1ffffe5fL) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0xffffffffffbfc000L) != 0L || (active1 & 0x1ffefe5fL) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0xffffffbfffbfc000L) != 0L || (active1 & 0x1ffefc5fL) != 0L)
            return 9;
         return -1;
      case 10:
         if ((active0 & 0xffffdfbfffbfc000L) != 0L || (active1 & 0x1efefc1fL) != 0L)
            return 9;
         return -1;
      case 11:
         if ((active0 & 0xffffdfaff7bbc000L) != 0L || (active1 & 0x1efedc1fL) != 0L)
            return 9;
         return -1;
      case 12:
         if ((active0 & 0xffffddaff79b4000L) != 0L || (active1 & 0x1efedc1fL) != 0L)
            return 9;
         return -1;
      case 13:
         if ((active0 & 0xfffeddaf759b4000L) != 0L || (active1 & 0x1efed81fL) != 0L)
            return 9;
         return -1;
      case 14:
         if ((active0 & 0xfffeddaf359b0000L) != 0L || (active1 & 0x1ef4d81fL) != 0L)
            return 9;
         return -1;
      case 15:
         if ((active0 & 0xfffe5daf35910000L) != 0L || (active1 & 0x1ef4d81fL) != 0L)
            return 9;
         return -1;
      case 16:
         if ((active0 & 0xfffe5d8f35910000L) != 0L || (active1 & 0x1ef4c81fL) != 0L)
            return 9;
         return -1;
      case 17:
         if ((active0 & 0xbffe1c8f35910000L) != 0L || (active1 & 0x1ef4c81bL) != 0L)
            return 9;
         return -1;
      case 18:
         if ((active0 & 0xbffe100731900000L) != 0L || (active1 & 0x1ef4c009L) != 0L)
            return 9;
         return -1;
      case 19:
         if ((active0 & 0xbfdc100711000000L) != 0L || (active1 & 0x1cf48009L) != 0L)
            return 9;
         return -1;
      case 20:
         if ((active0 & 0xbfcc000400000000L) != 0L || (active1 & 0x1cf08009L) != 0L)
            return 9;
         return -1;
      case 21:
         if ((active0 & 0xbfcc000400000000L) != 0L || (active1 & 0x1cb08009L) != 0L)
            return 9;
         return -1;
      case 22:
         if ((active0 & 0xbfcc000000000000L) != 0L || (active1 & 0x1cb08000L) != 0L)
            return 9;
         return -1;
      case 23:
         if ((active0 & 0xb58c000000000000L) != 0L || (active1 & 0x8a08000L) != 0L)
            return 9;
         return -1;
      case 24:
         if ((active0 & 0x504000000000000L) != 0L || (active1 & 0xa00000L) != 0L)
            return 9;
         return -1;
      case 25:
         if ((active0 & 0x104000000000000L) != 0L || (active1 & 0xa00000L) != 0L)
            return 9;
         return -1;
      case 26:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0xa00000L) != 0L)
            return 9;
         return -1;
      case 27:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0xa00000L) != 0L)
            return 9;
         return -1;
      case 28:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0xa00000L) != 0L)
            return 9;
         return -1;
      case 29:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x200000L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 103);
      case 35:
         return jjStopAtPos(0, 104);
      case 40:
         return jjStopAtPos(0, 5);
      case 41:
         return jjStopAtPos(0, 6);
      case 60:
         return jjStopAtPos(0, 102);
      case 61:
         return jjStopAtPos(0, 7);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1000000000010000L, 0x1b000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2080L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x201000L, 0x80200L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x99ff80084a000L, 0x449457L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8004400000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x8L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x120L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x540000000000800L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0xa00000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x300007ff584400L, 0x100800L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x4802200000000000L, 0x4024000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 94:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1ff80082a000L, active1, 0x435436L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x300007ff184000L, active1, 0x100800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000040000L, active1, 0xa00100L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x9800000000000L, active1, 0x48001L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0x80200L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000410400L, active1, 0x1b000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x80L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004400000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400000000000200L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4082200000000000L, active1, 0x4002008L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000001000L, active1, 0x80300L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4002200000000000L, active1, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x48000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa00000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x300007ff184000L, active1, 0x100800L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000220000L, active1, 0x24000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000010000L, active1, 0x1b000008L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x9800000000000L, active1, 0x21L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1ff80080a400L, active1, 0x401416L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004400000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000400000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1ff80080a000L, active1, 0xe01456L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x8L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 9);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x5700007ff1a4000L, active1, 0x124800L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x48000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004400000000000L, active1, 0x10000L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x9800000000000L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000040000L, active1, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10c00L, active1, 0x1b000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0x80200L);
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x24000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x401006L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000040000L, active1, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x300007ff184000L, active1, 0x100800L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000000000L, active1, 0x48020L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000200400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x9800000000000L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000000000800L, active1, 0L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x80200L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000812000L, active1, 0x1ba02018L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8004400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80200L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80046a0000010000L, active1, 0x1b000400L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000200000L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2089840000000000L, active1, 0xa00009L);
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400010000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x5800000000L, active1, 0x4024000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x48000L, active1, 0x449006L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x48300007ff184000L, active1, 0x100800L);
      case 120:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x200100000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x802000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1080000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000104000L, active1, 0x100800L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000100000040000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x24000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x542004000000000L, active1, 0x48000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200001000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x8004410000000000L, active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0xa000200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x9840000020000L, active1, 0x2401L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000008000L, active1, 0x440100eL);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x802000L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x220000000000L, active1, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000800010000L, active1, 0x1b000200L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xa00000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x40004000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2c0000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2100000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x8004408800a00000L, active1, 0xa00010L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2800000100010000L, active1, 0x1b024000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000b080000L, active1, 0x48008L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1014000000L, active1, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000008000L, active1, 0x401006L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1030000000104000L, active1, 0x100800L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x9800000040000L, active1, 0x4000001L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000400000000L, active1, 0L);
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800011L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8200000000000L, active1, 0x200000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800f0400000000L, active1, 0x4000008L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000008008000L, active1, 0x481406L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400000002060000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x2020000000L, active1, 0x40L);
      case 109:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x14000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x8004401100200000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x30000000114000L, active1, 0x1b100800L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2100001000000L, active1, 0x4a000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000080000L, active1, 0x24000L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x100300000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x48000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0xa00001008000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0x800001L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000400000000L, active1, 0L);
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 9);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000002011880000L, active1, 0x10L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x24000L);
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x80830000000000L, active1, 0x8L);
      case 110:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x101000000010000L, active1, 0x1a000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000002040000L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x30000004104000L, active1, 0x100800L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000008000L, active1, 0x481006L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8004400000200000L, active1, 0x4000000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000020000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x3084000000200000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L, active1, 0x18000000L);
      case 86:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x900360000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0xa00000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0000000000L, active1, 0x24000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x470000880104000L, active1, 0x100800L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 9);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 9);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000020000L, active1, 0x4000000L);
      case 106:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x8004000000L, active1, 0L);
      case 109:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 77, 9);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 18, 9);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L, active1, 0x48000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000001080000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400008000L, active1, 0xc81407L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x30000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000002000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000010000000L, active1, 0x800009L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x3084000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000800000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0x48000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 41, 9);
         return jjMoveStringLiteralDfa12_0(active0, 0x4008012004000000L, active1, 0x200000L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 21, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0xc0000000000L, active1, 0x80010L);
      case 106:
         return jjMoveStringLiteralDfa12_0(active0, 0xa00000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000e0000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x3000000000000L, active1, 0x4000400L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x30100300114000L, active1, 0x18100800L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x800001080000L, active1, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L, active1, 0x24000L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x401006L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x401000L);
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800001L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x400400000000L, active1, 0x24000L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0x200000L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x100300000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0xa00008001080000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 25, 9);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(12, 31, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0x48000L);
      case 106:
         return jjMoveStringLiteralDfa13_0(active0, 0x3084000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L, active1, 0L);
      case 109:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 74, 9);
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 48, 9);
         return jjMoveStringLiteralDfa13_0(active0, 0xc2000000000L, active1, 0x4000010L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L, active1, 0x18080000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x810000000000L, active1, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x8070000800104000L, active1, 0x100808L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x60020000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000c0000020000L, active1, 0xcL);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0xa00000001000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(13, 30, 9);
         return jjMoveStringLiteralDfa14_0(active0, 0x3086800024000000L, active1, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x100b00800000L, active1, 0x10L);
      case 106:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000L);
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 83, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L, active1, 0x18000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L, active1, 0x800001L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x408000000000L, active1, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x4008002000000000L, active1, 0x201000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x48000L);
      case 121:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x30000000100000L, active1, 0x100800L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100800L);
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0x8008000000000000L, active1, 0x200008L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x3084000000800000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000010010000L, active1, 0x18000000L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 19, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x48000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 17, 9);
         return jjMoveStringLiteralDfa15_0(active0, 0xc0000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x100100304000000L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L, active1, 0x801001L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x42010000000000L, active1, 0x6000000L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 47, 9);
         return jjMoveStringLiteralDfa15_0(active0, 0x400020000000L, active1, 0x404000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0xa00000001000000L, active1, 0x10L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x4000L);
      case 70:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0xa00000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x120100300000000L, active1, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x48000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L, active1, 0x400000L);
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 37, 9);
         break;
      case 103:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0xc0401000000L, active1, 0x10L);
      case 109:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(15, 76, 9);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x50010000000000L, active1, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x800001L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x8008008000010000L, active1, 0x18200008L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000L, active1, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x3086000004800000L, active1, 0x2000800L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x804000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa17_0(active0, 0x3084000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000L, active1, 0L);
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(16, 66, 9);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x800001L);
      case 102:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 62, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L, active1, 0x2000002L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x100100300000000L, active1, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 40, 9);
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x8008008001000000L, active1, 0x200818L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0xa00000020000000L, active1, 0x400000L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 46, 9);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000c0000010000L, active1, 0x18004000L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x48000L);
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x102000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000400000000L, active1, 0x48000L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000000000L, active1, 0x4100000L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(17, 26, 9);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(17, 35, 9);
         break;
      case 103:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x100300100000L, active1, 0L);
      case 109:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 39, 9);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(17, 75, 9);
         break;
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(17, 65, 9);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(17, 68, 9);
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0xa00000020800000L, active1, 0x2004000L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x8008000000000000L, active1, 0x200008L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x3084000010000000L, active1, 0x800001L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x400000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 17;
         }
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 42, 9);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 43, 9);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x18000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10000000L);
      case 98:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 53, 9);
         return jjMoveStringLiteralDfa19_0(active0, 0x8008000000000000L, active1, 0x200008L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 49, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000000L, active1, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000L, active1, 0x48000L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(18, 29, 9);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(18, 78, 9);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(18, 20, 9);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(18, 23, 9);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(18, 89, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x3084000010000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0xa00000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x440000000000000L, active1, 0x4100000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x100300000000L, active1, 0x800001L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0xa00000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(19, 24, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000L, active1, 0x1L);
      case 106:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(19, 28, 9);
         break;
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 52, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000000000L, active1, 0x8400000L);
      case 112:
         return jjMoveStringLiteralDfa20_0(active0, 0x3084000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x8008000000000000L, active1, 0x200008L);
      case 115:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000000000L, active1, 0x4100000L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(19, 32, 9);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(19, 33, 9);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 44, 9);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x808000L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x3184000000000000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000000000L, active1, 0x100000L);
      case 109:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8000000L);
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(20, 86, 9);
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0xa00000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x8008000400000000L, active1, 0x200008L);
      case 121:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1);
      return 21;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa22_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x440000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x8008000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa22_0(active0, 0x3084000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(21, 64, 9);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0xa00000000000000L, active1, 0x8000L);
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(21, 34, 9);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(21, 67, 9);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1);
      return 22;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x200000L);
      case 101:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(22, 92, 9);
         return jjMoveStringLiteralDfa23_0(active0, 0x8008000000000000L, active1, 0L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(22, 90, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8000000L);
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(22, 84, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 54, 9);
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active0, 0x3184000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 57, 9);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 59, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(21, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1);
      return 23;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa24_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(23, 79, 9);
         break;
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(23, 91, 9);
         break;
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 51, 9);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 63, 9);
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0x400000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 55, 9);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 60, 9);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 61, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(22, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, active1);
      return 24;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa25_0(active0, 0x100000000000000L, active1, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x200000L);
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 58, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, active1);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(23, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, active1);
      return 25;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0x100000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 50, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, active1);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(24, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, active1);
      return 26;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa27_0(active0, 0x100000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, active1);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(25, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, active1);
      return 27;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0x100000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, active1);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(26, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, active1);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0L, active1, 0x200000L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(28, 87, 9);
         break;
      case 114:
         return jjMoveStringLiteralDfa29_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, active1);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(27, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, active1);
      return 29;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa30_0(active0, 0L, active1, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa30_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, active1);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(28, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, active1);
      return 30;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(30, 85, 9);
         break;
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(30, 56, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(29, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x5e00000000ffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec7 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  else if (curChar == 58)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(0); }
                  break;
               case 3:
                  if (curChar == 45)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 6:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 58)
                     kind = 95;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(8); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 64)
                     { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(6, 7); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(8); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(8); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(3, 0);
}
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 2:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  kind = 109;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (curChar != 92)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 110);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x3ff200000000000L & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 107)
                     kind = 107;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xaffffffa00000000L & l) == 0L)
                     break;
                  kind = 105;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xc7fffffeafffffffL & l) == 0L)
                     break;
                  kind = 105;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 111);
      case 13:
         return jjStopAtPos(0, 112);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 106);
      default :
         return 1;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\50", "\51", "\75", "\136\136", 
"\120\162\145\146\151\170", "\117\156\164\157\154\157\147\171", "\111\155\160\157\162\164", 
"\103\154\141\163\163", "\104\141\164\141\164\171\160\145", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171", "\104\141\164\141\120\162\157\160\145\162\164\171", 
"\101\156\156\157\164\141\164\151\157\156\120\162\157\160\145\162\164\171", "\116\141\155\145\144\111\156\144\151\166\151\144\165\141\154", 
"\104\145\143\154\141\162\141\164\151\157\156", "\117\142\152\145\143\164\111\156\166\145\162\163\145\117\146", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171\103\150\141\151\156", "\103\157\155\160\154\145\155\145\156\164\117\146", "\117\156\145\117\146", 
"\104\141\164\141\164\171\160\145\122\145\163\164\162\151\143\164\151\157\156", 
"\117\142\152\145\143\164\111\156\164\145\162\163\145\143\164\151\157\156\117\146", "\117\142\152\145\143\164\125\156\151\157\156\117\146", 
"\117\142\152\145\143\164\103\157\155\160\154\145\155\145\156\164\117\146", "\117\142\152\145\143\164\117\156\145\117\146", 
"\117\142\152\145\143\164\123\157\155\145\126\141\154\165\145\163\106\162\157\155", 
"\117\142\152\145\143\164\101\154\154\126\141\154\165\145\163\106\162\157\155", "\117\142\152\145\143\164\110\141\163\126\141\154\165\145", 
"\117\142\152\145\143\164\110\141\163\123\145\154\146", 
"\117\142\152\145\143\164\115\151\156\103\141\162\144\151\156\141\154\151\164\171", 
"\117\142\152\145\143\164\115\141\170\103\141\162\144\151\156\141\154\151\164\171", 
"\117\142\152\145\143\164\105\170\141\143\164\103\141\162\144\151\156\141\154\151\164\171", "\104\141\164\141\111\156\164\145\162\163\145\143\164\151\157\156\117\146", 
"\104\141\164\141\125\156\151\157\156\117\146", "\104\141\164\141\103\157\155\160\154\145\155\145\156\164\117\146", 
"\104\141\164\141\117\156\145\117\146", "\104\141\164\141\123\157\155\145\126\141\154\165\145\163\106\162\157\155", 
"\104\141\164\141\101\154\154\126\141\154\165\145\163\106\162\157\155", "\104\141\164\141\110\141\163\126\141\154\165\145", 
"\104\141\164\141\115\151\156\103\141\162\144\151\156\141\154\151\164\171", "\104\141\164\141\115\141\170\103\141\162\144\151\156\141\154\151\164\171", 
"\104\141\164\141\105\170\141\143\164\103\141\162\144\151\156\141\154\151\164\171", "\123\165\142\103\154\141\163\163\117\146", 
"\105\161\165\151\166\141\154\145\156\164\103\154\141\163\163\145\163", "\104\151\163\152\157\151\156\164\103\154\141\163\163\145\163", 
"\104\151\163\152\157\151\156\164\125\156\151\157\156", 
"\123\165\142\117\142\152\145\143\164\120\162\157\160\145\162\164\171\117\146", 
"\105\161\165\151\166\141\154\145\156\164\117\142\152\145\143\164\120\162\157\160\145\162\164\151\145\163", 
"\104\151\163\152\157\151\156\164\117\142\152\145\143\164\120\162\157\160\145\162\164\151\145\163", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171\104\157\155\141\151\156", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171\122\141\156\147\145", 
"\111\156\166\145\162\163\145\117\142\152\145\143\164\120\162\157\160\145\162\164\151\145\163", 
"\106\165\156\143\164\151\157\156\141\154\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\111\156\166\145\162\163\145\106\165\156\143\164\151\157\156\141\154\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\122\145\146\154\145\170\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\111\162\162\145\146\154\145\170\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\123\171\155\155\145\164\162\151\143\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\101\163\171\155\155\145\164\162\151\143\117\142\152\145\143\164\120\162\157\160\145\162\164\171", 
"\124\162\141\156\163\151\164\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171", "\123\165\142\104\141\164\141\120\162\157\160\145\162\164\171\117\146", 
"\105\161\165\151\166\141\154\145\156\164\104\141\164\141\120\162\157\160\145\162\164\151\145\163", 
"\104\151\163\152\157\151\156\164\104\141\164\141\120\162\157\160\145\162\164\151\145\163", "\104\141\164\141\120\162\157\160\145\162\164\171\104\157\155\141\151\156", 
"\104\141\164\141\120\162\157\160\145\162\164\171\122\141\156\147\145", 
"\106\165\156\143\164\151\157\156\141\154\104\141\164\141\120\162\157\160\145\162\164\171", "\104\141\164\141\164\171\160\145\104\145\146\151\156\151\164\151\157\156", 
"\110\141\163\113\145\171", "\104\114\123\141\146\145\122\165\154\145", "\102\157\144\171", 
"\110\145\141\144", "\103\154\141\163\163\101\164\157\155", 
"\104\141\164\141\122\141\156\147\145\101\164\157\155", "\117\142\152\145\143\164\120\162\157\160\145\162\164\171\101\164\157\155", 
"\104\141\164\141\120\162\157\160\145\162\164\171\101\164\157\155", "\102\165\151\154\164\111\156\101\164\157\155", 
"\123\141\155\145\111\156\144\151\166\151\144\165\141\154\163\101\164\157\155", 
"\104\151\146\146\145\162\145\156\164\111\156\144\151\166\151\144\165\141\154\163\101\164\157\155", "\126\141\162\151\141\142\154\145", 
"\123\141\155\145\111\156\144\151\166\151\144\165\141\154", 
"\104\151\146\146\145\162\145\156\164\111\156\144\151\166\151\144\165\141\154\163", "\103\154\141\163\163\101\163\163\145\162\164\151\157\156", 
"\117\142\152\145\143\164\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", 
"\116\145\147\141\164\151\166\145\117\142\152\145\143\164\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", 
"\104\141\164\141\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", 
"\116\145\147\141\164\151\166\145\104\141\164\141\120\162\157\160\145\162\164\171\101\163\163\145\162\164\151\157\156", "\101\156\156\157\164\141\164\151\157\156", 
"\101\156\156\157\164\141\164\151\157\156\101\163\163\145\162\164\151\157\156", 
"\123\165\142\101\156\156\157\164\141\164\151\157\156\120\162\157\160\145\162\164\171\117\146", 
"\101\156\156\157\164\141\164\151\157\156\120\162\157\160\145\162\164\171\104\157\155\141\151\156", 
"\101\156\156\157\164\141\164\151\157\156\120\162\157\160\145\162\164\171\122\141\156\147\145", null, null, null, null, "\137\72", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   6, 7, 8, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         if ((jjbitVec7[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 105;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 108;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 109;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       if (jjmatchedPos == 0 && jjmatchedKind > 113)
       {
          jjmatchedKind = 113;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AbstractOwl2FunctionalStyleParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public AbstractOwl2FunctionalStyleParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "FullIri",
   "FullIriEnd",
   "AfterPrefix",
   "QuotedString",
   "QuotedStringEnd",
   "Comment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, -1, -1, 
   -1, -1, 1, 4, 6, 2, 0, 0, 0, 5, 0, 0, 0, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x2a02ffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x3d5c000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[9];
    private final int[] jjstateSet = new int[2 * 9];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
